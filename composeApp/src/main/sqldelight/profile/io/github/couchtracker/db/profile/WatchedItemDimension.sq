import io.github.couchtracker.db.profile.model.icon.DbIcon;
import io.github.couchtracker.db.profile.model.text.DbText;
import io.github.couchtracker.db.profile.model.watchedItem.WatchedItemDimensionType;
import io.github.couchtracker.db.profile.model.watchedItem.WatchedItemType;
import kotlin.collections.Set;

/**
 * Represents each type of data that can be stored in conjunction with a watched movie or episode.
 */
CREATE TABLE WatchedItemDimension(
  id INTEGER PRIMARY KEY NOT NULL,
  name TEXT AS DbText NOT NULL,
  appliesTo TEXT AS Set<WatchedItemType> NOT NULL,
  type TEXT AS WatchedItemDimensionType NOT NULL,
  manualSortIndex INTEGER NOT NULL
);

/**
 * Many-to-many relationship between WatchedItemDimension and WatchedItemDimensionChoice.
 *
 * If, for a specific dimension:
 * - There are no rows: it means that the dimension is always visible
 * - There is a single row: it means that the dimension is visible only if that choice is selected
 * - There are multiple rows. it means that the dimension is visible if any of the choices are selected
 *
 * Note: it doesn't ever make sense to have a row in which the choice belongs to the dimension it is enabling. Any row
 * with such values shall be ignored and have no effect.
 */
CREATE TABLE WatchedItemDimensionEnableIf(
  dimension INTEGER NOT NULL,
  choice INTEGER NOT NULL,

  PRIMARY KEY(dimension, choice),
  FOREIGN KEY(dimension) REFERENCES WatchedItemDimension(id) ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY(choice) REFERENCES WatchedItemDimensionChoice(id) ON UPDATE CASCADE ON DELETE RESTRICT
);


selectAll:
SELECT *
FROM WatchedItemDimension
ORDER BY manualSortIndex;

selectAllEnableIf:
SELECT *
FROM WatchedItemDimensionEnableIf;

insert:
INSERT INTO WatchedItemDimension(name, appliesTo, type, manualSortIndex)
VALUES (?, ?, ?, (SELECT COALESCE(:manualSortIndex, MAX(manualSortIndex) + 1, 0) FROM WatchedItemDimension))
RETURNING id;
